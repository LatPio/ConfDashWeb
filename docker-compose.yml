services:
  ## Postgres for applications
  postgres:
    container_name: postgres
    image: postgres
#    network_mode: host
    environment:
      POSTGRES_USER: confdashweb
      POSTGRES_PASSWORD: password
    volumes:
      - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

    restart: unless-stopped
  pgadmin:
    container_name: pgadmin
#    network_mode: host
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"

    restart: unless-stopped
  ## Keycloack
  keycloak:
    container_name: keycloak
    hostname: keycloak
#    network_mode: host
    image: quay.io/keycloak/keycloak:21.1.1
    command: [ "start-dev", "--import-realm"  ]
#    command: [ "start-dev", "--import-realm", "--http-port=8181" ,"--hostname=keycloak" ,"--hostname-strict-backchannel=false","--hostname-admin=keycloak" ]

    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: confdashweb
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
#      KC_HOSTNAME: localhost
#      KC_HOSTNAME_ADMIN_URL: http://localhost:8181
#      KC_HOSTNAME_STRICT_BACKCHANNEL: true
    ports:
      - "8181:8080"
    restart: unless-stopped
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - postgres


  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
#    network_mode: host
    container_name: zipkin
    ports:
      - "9411:9411"
  ##FrontEnd-Angular-Server
  angular-server:
    image: piolat/frontend-angular:latest
#    network_mode: host
    container_name: angular-frontend
    pull_policy: always
    volumes:
      - '/app/node_modules'
    ports:
      - "4200:8080"

  ##Discovery-Server
  discovery-server:
#    network_mode: host
    image: piolat/discovery-server:latest
    container_name: discovery-server
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
  ##Api-Gateway
  api-gateway:
#    network_mode: host
    image: piolat/api-gateway:latest
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8080:8080"
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI= http://localhost:8181/realms/confdashweb
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

  ##Abstract-Server
  abstract-service:
#    network_mode: host
    image: piolat/abstracts-service:latest
    container_name: abstracts-service
    pull_policy: always
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker

    depends_on:
      - api-gateway
      - discovery-server
      - keycloak
      - postgres


  ##Basket-Server
  basket-service:
#    network_mode: host
    image: piolat/basket-service:latest
    container_name: basket-service
    pull_policy: always
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - api-gateway
      - discovery-server
      - keycloak
      - postgres
  ##Customer-Server
  customer-service:
#    network_mode: host
    image: piolat/customer-service:latest
    container_name: customer-service
    pull_policy: always
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - api-gateway
      - discovery-server
      - keycloak
      - postgres
  ##Event-Server
  event-service:
#    network_mode: host
    image: piolat/event-service:latest
    container_name: event-service
    pull_policy: always
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - api-gateway
      - discovery-server
      - keycloak
      - postgres
  ##Localization-Server
  localization-service:
#    network_mode: host
    image: piolat/localization-service:latest
    container_name: localization-service
    pull_policy: always
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - api-gateway
      - discovery-server
      - keycloak
      - postgres
  ##Site-Server

  site-service:
#    network_mode: host
    image: piolat/site_management-service:latest
    container_name: site-service
    pull_policy: always
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - api-gateway
      - discovery-server
      - keycloak
      - postgres




